quantile(picture, probs = c(0.3, 0.8) )
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
dest <- "GDP.csv"
download.file(url,dest=dest)
GDP<- read.csv(GDP.csv)
GDP<- read.csv("GDP.csv")
View(GDP)
?read.csv
GDP<- read.csv("GDP.csv",skip=5)
View(GDP)
GDP<- read.csv("GDP.csv",skip=5,header=FALSE)
View(GDP)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
dest="ed.csv"
download.file(url,dest=dest)
ed <- read.csv("ed.csv")
View(ed)
combined <- merge(GDP,ed,by.x="V1",by.y="CountryCode",sort=TRUE)
View(combined)
combined[with(combined,order(-V2))]
combined[with(combined,order(-V2) )]
?with
combined[order(-V2)]
colnames(combined)
combined[order(-combined$V2)]
combined[order(-v2)]
combined[order(V2
)]
combined[with(combined, order(-V2) )]
combined[with(combined, order(-'V2') )]
combined[with(combined, order('V2') )]
combined[order('V2')]
combined
View(combined)
attach(combined)
combined[with(combined, order(-V2) )]
combined[sort(-V2),]
combined[sort(combined$V2),]
sorted <- combined[sort(combined$V2),]
View(sorted)
combined <- merge(gdp, fed, by.x='V1', by.y='CountryCode', sort=TRUE)
# Getting and Cleaning Data
# Coursera
# John Hopkins University
# Bastiaan Quast
# bquast@gmail.com
# write the file url and file destination to an object
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
file.dest <- 'GDP.csv'
# download from the URL
download.file(file.url, file.dest )
# specify the right lines
rowNames <- seq(10,200, 2)
# read the data
gdp <- read.csv('GDP.csv', header=F, skip=5, nrows=190)
View(gdp)
# second data file
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
file.dest <- 'GDP2.csv'
# download from the URL
download.file(file.url, file.dest )
# read second file
fed <- read.csv('GDP2.csv')
View(fed)
# merge datasets
combined <- merge(gdp, fed, by.x='V1', by.y='CountryCode', sort=TRUE)
View(combined)
# Q3.
# sort the data
combined[with(combined, order(-V2) )]
# Q4.
# OECD
mean(combined[combined$Income.Group=='High income: OECD',]$V2)
# non OECD
mean(combined[combined$Income.Group=='High income: nonOECD',]$V2)
# Q5.
# assign quentile values
quentile <- c(0.2,0.4,0.6,0.8,1)
q <- quantile(combined$V2, quentile)
q1 <- combined$V2 <= 38
xtabs(q1 ~ combined$Income.Group)
combined2 <- as.data.frame(merge(gdp, fed, by.x='V1', by.y='CountryCode', sort=TRUE))
combined2[with(combined2,order(-V2))]
combined2 <- as.data.frame(merge(gdp, fed, by.x='V1', by.y='CountryCode'))
View(combined2)
combined2[with(combined2,order(-V2))]
combined2[with(combined2,order(-combined2$V2))]
combined2[with(combined2,order(
))]
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "gdp.csv", method = "curl")
gdp <- read.csv("./gdp.csv")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile = "edu.csv", method = "curl")
edu <- read.csv("./edu.csv")
X=CountryCode
names(gdp)
names(edu)
head(gdp)
head(edu)
gdpclean<-gdp[5:194,]
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
quantile(mergedData$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
mergedData$gdp=cut2(mergedData$Gross.domestic.product.2012,g=5)
table(mergedData$Income.Group,mergedData$gdp)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "gdp.csv")
gdp <- read.csv("./gdp.csv")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile = "edu.csv")
edu <- read.csv("./edu.csv")
X=CountryCode
names(gdp)
names(edu)
head(gdp)
head(edu)
gdpclean<-gdp[5:194,]
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
quantile(mergedData$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
mergedData$gdp=cut2(mergedData$Gross.domestic.product.2012,g=5)
table(mergedData$Income.Group,mergedData$gdp)
install.packages("Hmisc")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "gdp.csv")
gdp <- read.csv("./gdp.csv")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile = "edu.csv")
edu <- read.csv("./edu.csv")
X=CountryCode
names(gdp)
names(edu)
head(gdp)
head(edu)
gdpclean<-gdp[5:194,]
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
quantile(mergedData$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
mergedData$gdp=cut2(mergedData$Gross.domestic.product.2012,g=5)
table(mergedData$Income.Group,mergedData$gdp)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
dest <- "GDP.csv"
download.file(url,dest=dest)
gdp <- read.csv(dest)
View(gdp)
gdpclean <- gdp[5:194,]
View(gdpclean)
edu <- read.csv("edu.csv")
View(edu)
combined <- merge(gdpclean,edu,by.x="X",by.y="CountryCode")
View(combined)
combined[sort(Gross.domestic.product.2012)]
combined[sort(combined$Gross.domestic.product.2012)]
combined[sort('Gross.domestic.product.2012')]
?attach
sapply(combined,class)
transform(combined,Gross.domestic.product.2012=as.numeric(Gross.domestic.product.2012))
gdpclean <- transform(combined,Gross.domestic.product.2012=as.numeric(Gross.domestic.product.2012))
gdpclean[sort(-Gross.domestic.product.2012)]
gdpclean[sort(-combined$Gross.domestic.product.2012)]
gdpclean[sort(-gdpclean$Gross.domestic.product.2012)]
sorted <- gdpclean[sort(-gdpclean$Gross.domestic.product.2012)]
View(sorted)
sorted <- gdpclean[sort(-gdpclean$Gross.domestic.product.2012),]
View(sorted)
combinedfixed <- transform(combined,Gross.domestic.product.2012=as.numeric(Gross.domestic.product.2012))
x <- combinedfixed[with(combinedfixed,sort(-combinedfixed$Gross.domestic.product.2012))]
View(x)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
dest <- "idaho.csv"
download.file(url,dest=dest)
idaho <- read.csv(dest)
View(idaho)
names(idaho)
lapply(names(idaho),strplit("wgtp"))
lapply(names(idaho),strsplit("wgtp"))
?strsplit
strsplit(names(idaho),"wgtp")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
dest <- "gdp.csv"
download.file(url,dest=dest)
gdp <- read.csv(dest)
View(gdp)
gdpclean <- gdp[5:194,]
View(gdpclean)
gdpclean[,X.3]
gdpclean[,gdpclean$X.3]
gdpclean[,gdpclean$X3]
gdpclean[,gdpclean$X.3]
gdpclean[,"gdpclean$X.3"]
subset(gdpclean,gdpclean$X.3)
gdpclean[,gdpclean$X.3]
colnames(gdpclean) = c('row','countrycode','rank','unk','country','gdp','x','y','z','w')
View(gdpclean)
colnames(gdpclean) = c(countrycode','rank','unk','country','gdp','x','y','z','w')
View(gdpclean)
colnames(gdpclean) = c('countrycode','rank','unk','country','gdp','x','y','z','w')
View(gdpclean)
View(gdpclean)
gdpclean <- gdp[5:194,]
colnames(gdpclean) = c('countrycode','rank','unk','country','gdp','x','y','z','w','v')
gdpclean <- gdp[5:194,]
colnames(gdpclean) = c('countrycode','rank','unk','country','gdp','x','y','z','w','v')
View(gdpclean)
gdpclean[,gdp]
gdpclean[,gdpclean$gdp]
class(gdpclean)
subset(gdpclean,gdpclean$gdp)
gdpclean[,5]
gsub(gdpclean[,5]
)
?gsub
gsub(",","",gdpclean[,5])
average(as.numeric(gsub(",","",gdpclean[,5])))
mean(as.numeric(gsub(",","",gdpclean[,5])))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
dest <- "edu.csv"
download.file(url,dest=dest)
ed <- read.csv(dest)
combined <- merg(gdpclean,ed,by.x="countrycode",by.y="CountryCode")
combined <- merge(gdpclean,ed,by.x="countrycode",by.y="CountryCode")
View(combined)
combined[,19]
logical <- grep("Fiscal year end:",combined[,19])
logical
fiscal <- combined[logical,19]
fiscal
june <- grep("June 30",fiscal)
fiscal[june,]
fiscal[june]
grep("^United",gdpclean[,country])
grep("^United",gdpclean[,gdpclean$country])
grep("^United",gdpclean[,4])
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(sampleTimes)
grep("^2012",sampleTimes)
sampleTimes$day <- weekdays(as.Date(sampleTimes$x))
df <- as.data.frame(sampleTimes)
df$day <- weekdays(as.Date(df$x))
View(df)
df$day <- weekdays(as.Date(df$sampleTimes))
View(df)
logical <- grep("^2012",df$sampleTimes)
df[logical,]
2012 <- df[logical,]
twelve <- df[logical,]
logicalday <- grep("Monday",df$day)
day <- df[logicalday]
day <- df[logicalday,]
View Day
View(day)
logicalday <- grep("Monday",twelve$day)
day <- twelve[logicalday,]
View(day)
install.package("nlme")
install.packages("nlme")
install.packages("lattice")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
summary(fit)$sigma
summary(fit)$coefficients
data(mtcars)
lm(mtcars$mpg ~ mtcars$weight)
lm(mtcars$mpg ~ mtcars$wt)
fit <- lm(mtcars$mpg ~ mtcars$wt)
p1 <- predict(fit,newdata = data.frame(mean(x)), interval = ("confidence"))
p1 <- predict(fit,newdata = data.frame(mean(mtcars$wt)), interval = ("confidence"))
p1
p1 <- predict(fit,data.frame(x=mean(mtcars$wt)), interval = ("confidence"))
x <- mtcars$wt
p1 <- predict(fit,data.frame(x=mean(x)), interval = ("confidence"))
predict(fit,data.frame(x=mean(x)), interval = ("confidence"))
predict(fit,data.frame(x=mean(x)), interval = "confidence")
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=3), interval="confidence")
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=3000), interval="confidence")
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=3), interval="prediction")
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=2), interval="confidence")
fit2 <- lm(y ~ (x*2))
fit2 <- lm(y ~ I(x/2))
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
data <- read.csv("activity.csv")
setwd("~/GitHub/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
?hist
hist(data$steps)
data2 <- na.omit(data)
stepsByDate <- aggregate(steps ~ date, data2, sum)
hist(stepsByDate)
hist(stepsByDate@steps)
hist(stepsByDate@steps,col=1)
table_date_steps <- aggregate(steps ~ date, df2, sum)
table_date_steps <- aggregate(steps ~ date, data2, sum)
hist(table_date_steps$steps, col=1, main="Histogram of total number of steps per day",
xlab="Total number of steps in a day")
mean(stepsByDate$steps)
median(stepsByDate$steps)
table_date_steps <- aggregate(steps ~ date, data, sum)
median(stepsByDate$steps)
mean(stepsByDate$steps)
mean(table_date_steps$steps)
median(table_date_steps$steps)
hist(table_date_steps$steps, col=1, main="Histogram of total number of steps per day",
xlab="Total number of steps in a day")
hist(dataByDate$steps,main="Histogram of Number of Steps Per Date",xlab="Total Number of Steps In A Date")
dataByDate <- aggregate(steps ~ date,data,sum)
hist(dataByDate$steps,main="Histogram of Number of Steps Per Date",xlab="Total Number of Steps In A Date")
hist(dataByDate$steps,col=2,main="Histogram of Number of Steps Per Date",xlab="Total Number of Steps In A Date")
hist(dataByDate$steps,col=3,main="Histogram of Number of Steps Per Date",xlab="Total Number of Steps In A Date")
avgByInterval <- aggregate(steps ~ interval,data,avg)
avgByInterval <- aggregate(steps ~ interval,data,mean)
meanByInterval <- aggregate(steps ~ interval,data,avg)
plot(meanByInterval$steps,time="l")
meanByInterval <- aggregate(steps ~ interval,data,mean)
plot(meanByInterval$steps,time="l")
plot(meanByInterval$steps,type="l")
plot(meanByInterval$steps,type="l",col=3)
plot(meanByInterval$steps,type="l",col=4)
plot(meanByInterval$steps,type="l",col=5)
plot(meanByInterval$steps,type="l",col=6)
plot(meanByInterval$steps,type="l",col=4)
plot(meanByInterval$steps,type="l",col=4,main="Average Steps By Interval",xlab="Average Number of Steps",ylab="Interval")
plot(meanByInterval$steps,type="l",col=4,main="Average Steps By Interval",ylab="Average Number of Steps",xlab="Interval")
maxStepsRow <- which.max(meanByInterval$steps)
meanByInterval[maxStepsRow,]
missingValues <- df(!complete.cases(data))
missingValues <- df(!complete.cases(data),)
missingValues <- data[!complete.cases(data),]
nrow(missingValues)
View(meanByInterval)
View(meanByInterval)
for (i in 1:nrow(data)){
if (is.na(data$steps[i])){
interval <- data$interval[i]
rowId <- which(meanByInterval$interval == interval)
steps <- meanByInterval$steps[rowId]
data$steps[i] <- steps
}
}
imputedStepsByDate <- aggregate(steps ~ date,data,sum)
hist(imputedStepsByDate,col=4)
imputedStepsByDate <- aggregate(steps ~ date,data,sum)
hist(imputedStepsByDate$steps,col=4)
imputedStepsByDate <- aggregate(steps ~ date,data,sum)
hist(imputedStepsByDate$steps,col=3)
mean(imputedStepsByDate$steps)
median(imputedStepsByDate$steps)
?weekdays
data$date <- as.Date(data$date,"%Y-%m-%d")
date
data
data$isWeekday <- as.Boolean(weekdays(data$date) == "Saturday" || weekdays(data$date) == "Sunday")
data$isWeekday <- (weekdays(data$date) == "Saturday" || weekdays(data$date) == "Sunday")
data$isWeekday <- as.Factor(data.isWeekday)
data$isWeekday <- as.factor(data.isWeekday)
data$isWeekday <- as.factor(data$isWeekday)
data$isWeekday <- as.Factor(weekdays(data$date) == "Saturday" || weekdays(data$date) == "Sunday")
data$isWeekday <- as.factor(weekdays(data$date) == "Saturday" || weekdays(data$date) == "Sunday")
View(data)
View(data)
data$isWeekday <- as.factor(as.boolean(weekdays(data$date) == "Saturday" || weekdays(data$date) == "Sunday"))
data$isWeekday <- as.boolean(weekdays(data$date) == "Saturday" || weekdays(data$date) == "Sunday")
data$dayOfTheWeek <- weekdays(data$date)
data$isWeekday <- true
data$isWeekday <- 1
for (i in 1:nrow(data)) {
if (data$dayOfTheWeek == "Saturday" || data$dayOfTheWeek == "Sunday") {
data[i]$isWeekDay <- 0
}
}
data$isWeekDay <- as.factor(data$isWeekDay)
data$isWeekDay <- as.factor(data$isWeekDay)
View(data)
View(data)
data$isWeekday <- (weekdays(data$date) == "Saturday" || weekdays(data$date) == "Sunday")
data$isWeekday <- as.Factor(data.isWeekday)
data$isWeekday <- as.factor(data.isWeekday)
data$isWeekday <- as.factor(data$isWeekday)
library(ggplot2)
table_interval_steps_imputed <- aggregate(steps ~ interval+day_type, data, mean)
table_interval_steps_imputed <- aggregate(steps ~ interval+isWeekDay, data, mean)
table_interval_steps_imputed <- aggregate(steps ~ interval+isWeekday, data, mean)
qplot(interval, steps, data=table_interval_steps_imputed, geom=c("line"), xlab="Interval",
ylab="Number of steps", main="") + facet_wrap(~ day_type, ncol=1)
qplot(interval, steps, data=table_interval_steps_imputed, geom=c("line"), xlab="Interval",
ylab="Number of steps", main="") + facet_wrap(~ isWeekday, ncol=1)
data$date <- as.Date(data$date,"%Y-%m-%d")
data$dayOfTheWeek <- weekdays(data$date)
data$isWeekday <- TRUE
for (i in 1:nrow(data)) {
if (data$dayOfTheWeek == "Saturday" || data$dayOfTheWeek == "Sunday") {
data[i]$isWeekDay <- FALSE
}
}
data$isWeekDay <- as.factor(data$isWeekDay)
data$isWeekDay <- as.factor(data$isWeekday)
qplot(interval, steps, data=table_interval_steps_imputed, geom=c("line"), xlab="Interval",
ylab="Number of steps", main="") + facet_wrap(~ isWeekday, ncol=1)
qplot(interval, steps, data=table_interval_steps_imputed, geom=c("line"), xlab="Interval",
ylab="Number of steps", main="") + facet_wrap(~ isWeekday, ncol=1)
table_interval_steps_imputed <- aggregate(steps ~ interval+isWeekday, data, mean)
qplot(interval, steps, data=table_interval_steps_imputed, geom=c("line"), xlab="Interval",
ylab="Number of steps", main="") + facet_wrap(~ isWeekday, ncol=1)
View(table_interval_steps_imputed)
View(table_interval_steps_imputed)
for (i in 1:nrow(data)) {
if (data$dayOfTheWeek[i] == "Saturday" || data$dayOfTheWeek[i] == "Sunday") {
data$isWeekDay[i] <- FALSE
}
}
data$date <- as.Date(data$date,"%Y-%m-%d")
data$dayOfTheWeek <- weekdays(data$date)
data$isWeekday <- TRUE
for (i in 1:nrow(data)) {
if (data$dayOfTheWeek[i] == "Saturday" || data$dayOfTheWeek[i] == "Sunday") {
data$isWeekDay[i] <- FALSE
}
}
data$isWeekDay <- as.factor(data$isWeekday)
warnings()
table_interval_steps_imputed <- aggregate(steps ~ interval+isWeekday, data, mean)
qplot(interval, steps, data=table_interval_steps_imputed, geom=c("line"), xlab="Interval",
ylab="Number of steps", main="") + facet_wrap(~ isWeekday, ncol=1)
data$date <- as.Date(data$date,"%Y-%m-%d")
data$dayOfTheWeek <- weekdays(data$date)
data$dayGroup <- "weekday"
for (i in 1:nrow(data)) {
if (data$dayOfTheWeek[i] == "Saturday" || data$dayOfTheWeek[i] == "Sunday") {
data$dayGroup[i] <- "weekend"
}
}
data$dayGroup <- as.factor(data$dayGroup)
meanIntervalStepsDayGroup <- aggregate(steps ~ interval+isWeekday, data, mean)
qplot(interval, steps, data=meanIntervalStepsDayGroup, geom=c("line"), xlab="Interval",
ylab="Number of steps", main="") + facet_wrap(~ dayGroup, ncol=1)
qplot(interval, steps, data=data, geom=c("line"), xlab="Interval",
ylab="Number of steps", main="") + facet_wrap(~ dayGroup, ncol=1)
meanIntervalStepsDayGroup <- aggregate(steps ~ interval+dayGroup, data, mean)
qplot(interval, steps, data=meanIntervalStepsDayGroup, geom=c("line"), xlab="Interval",
ylab="Number of steps", main="") + facet_wrap(~ dayGroup, ncol=1)
qplot(interval, steps, data=meanIntervalStepsDayGroup, geom=c("line"), xlab="Interval", ylab="Number of steps", main="") + facet_wrap(~ dayGroup, ncol=3)
qplot(interval, steps, data=meanIntervalStepsDayGroup, geom=c("line"), xlab="Interval", ylab="Number of steps", main="") + facet_wrap(~ dayGroup, ncol=2)
qplot(interval, steps, data=meanIntervalStepsDayGroup, geom=c("line"), xlab="Interval",
ylab="Number of steps", main="") + facet_wrap(~ dayGroup, ncol=1)
setwd("~/GitHub/RepData_PeerAssessment1")
remoteFile <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
tempDir <- tempdir()
temp <- tempfile(tmpdir=tempDir, fileext=".zip")
download.file(remoteFile,temp,method="curl")
extractFilename = unzip(temp, list=TRUE)$Name[1]
unzip(tf, files=extractFilename, exdir=tempDir, overwrite=TRUE)
extractedFile <- file.path(tempDir, extractFilename)
activity <- read.csv(extractedFile,as.is=TRUE)
remoteFile <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
tempDir <- tempdir()
temp <- tempfile(tmpdir=tempDir, fileext=".zip")
download.file(remoteFile,temp)
extractFilename = unzip(temp, list=TRUE)$Name[1]
unzip(tf, files=extractFilename, exdir=tempDir, overwrite=TRUE)
extractedFile <- file.path(tempDir, extractFilename)
activity <- read.csv(extractedFile,as.is=TRUE)
remoteFile <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
tempDir <- tempdir()
temp <- tempfile(tmpdir=tempDir, fileext=".zip")
download.file(remoteFile,temp)
extractFilename = unzip(temp, list=TRUE)$Name[1]
unzip(temp, files=extractFilename, exdir=tempDir, overwrite=TRUE)
extractedFile <- file.path(tempDir, extractFilename)
activity <- read.csv(extractedFile,as.is=TRUE)
